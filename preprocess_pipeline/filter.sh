#!/bin/bash
###mapped genomes and reads overlap filter
version=250102
echo $(readlink -f $0)" "$*
echo "version: "${version}
USAGE_short="
*****************************************************
version ${version}

USAGE: ./filter.sh [options]  <useless_map.paf>  <path_to_workdir>

DESCRIPTION:
This is a script that filter alignmnet files with stricter parameters
ARGUMENTS:
path_to_paf       Specify path to <prefix>_useless_map.paf generated by pipeline.sh.
path_to_workdir   Specify path to <prefix>_workdir generated by pipeline.sh.(e.g.,gap-aid_workdir)

OPTIONS:
-p|--prefix         The prefix of output. (default:gap-aid-filter)
-re|--reliable      The alignment you think are reliable ,format:'MapQ aligned_ratio'.(default:'0 0.5')
-l|--length         The Alignment block length you think are unreliable.(default:1000)
-t|--threads        Number of threads(default:4)
-h|--help           Shows this help. Type --help for a full set of options.
*****************************************************
"
###############default parameter###
prefix="gap-aid-filter"

MapQ=0
aligned_ratio=0.5
align_length=1000
threads=4

while :; do
    case $1 in
    -h | --help)
        echo "$USAGE_short" >&1
        exit 0
        ;;
    -p | --prefix)
        OPTARG=$2
        prefix=$OPTARG
        shift
        ;;
    -re | --reliable)
        OPTARG=$2
        reliable=$OPTARG
        MapQ=$(echo $reliable | awk -F' ' '{print $1}')
        aligned_ratio=$(echo $reliable | awk -F' ' '{print $2}')
        shift
        ;;
    -l | --length)
        OPTARG=$2
        re='^[0-9]+$'
        if [[ $OPTARG =~ $re ]]; then
            echo " -l|--length flag was triggered, Alignment block length $OPTARG." >&1
            align_length=$OPTARG
        else
            echo ":( Wrong syntax for input size threshold. Using the default value ${align_length}." >&2
        fi
        shift
        ;;
    -t | --threads)
        OPTARG=$2
        threads=$OPTARG
        shift
        ;;
    --) # End of all options
        shift
        break
        ;;
    -?*)
        echo ":| WARNING: Unknown option. Ignoring: ${1}" >&2
        ;;
    *) # Default case: If no more options then break out of the loop.
        break ;;
    esac
    shift
done

#########check input########
[ -z $1 ] || [ -z $2 ]  && echo >&2 "Not sure how to parse your input: files not listed or not found at expected locations. Exiting!" && echo >&2 "$USAGE_short" && exit 1

[ ! -s $1 ] || [ ! -s $2 ]  && echo >&2 "Not sure how to parse your input: files not listed or not found at expected locations. Exiting!" && echo >&2 "$USAGE_short" && exit 1

if [ "$#" -ne 2 ]; then
    echo >&2 "Illegal number of arguments. Please double check your input. Exiting!" && echo >&2 "$USAGE_short" && exit 1
fi

## TODO: check file format
orig_paf=$1
workdir=$2
suffix=$(echo $orig_paf | awk -F'.' '{print $NF}')
if [ "$suffix" != 'paf' ] ; then
    echo "The input file must be in PAF format."
    exit 1
fi
pre_prefix=$(echo $orig_paf | awk -F'[_/]' '{print $(NF-2)}')
echo $(date +"%Y-%m-%d %H:%M:%S")

##########1.alignment#############
######step1.1##########

##########2.filter############
#######step2.2#########
echo "using more strict parmeters to filter"
awk -v mapq=$MapQ -v ar=$aligned_ratio '{if ($12 > mapq && $11 / $2 > ar) print $1}' ${orig_paf}| sort | uniq >filtered_reads.txt
grep -vFf filtered_reads.txt ${workdir}/${pre_prefix}.map.final.paf > ${prefix}.filter.map.final.paf
grep -vFf filtered_reads.txt ${workdir}/${pre_prefix}.map.final.paf > ${prefix}.ovlp.filter.paf
seqkit grep -v -w 0 -j ${threads} -f filtered_reads.txt ${workdir}/${pre_prefix}_useful.reads.fa >${prefix}_filter.useful.reads.fa
awk -v len=$align_length '($1 != $6 && $11 > len)' ${prefix}.ovlp.filter.paf >${prefix}.filter.ovlp.fianl.paf
python $(dirname "$(readlink -f "$0")")/recommand.py ${prefix}.filter.map.final.paf ${prefix}.filter.map.score.txt
python $(dirname "$(readlink -f "$0")")/recommand.py ${prefix}.filter.ovlp.final.paf ${prefix}.filter.ovlp.score.txt
python $(dirname "$(readlink -f "$0")")/build_index.py ${prefix}.filter.map.final.paf
if [ $? -ne 0 ]; then
    echo "step5.1 process error"
    exit 1

fi
python $(dirname "$(readlink -f "$0")")/build_index.py ${prefix}.filter.ovlp.final.paf
if [ $? -ne 0 ]; then
    echo "step5.2 process error"
    exit 1
fi

python $(dirname "$(readlink -f "$0")")/build_index.py ${prefix}.filter.map.score.txt
if [ $? -ne 0 ]; then
    echo "step5.3 process error"
    exit 1
fi
python $(dirname "$(readlink -f "$0")")/build_index.py ${prefix}.filter.ovlp.score.txt
if [ $? -ne 0 ]; then
    echo "step5.4 process error"
    exit 1
fi


##########6.make workdir##############
mkdir -p ${prefix}_workdir && cd ${prefix}_workdir
ln -sf ${workdir}/${prefix}.chr.fa ./${prefix}.chr.fa
ln -sf ${workdir}/${prefix}.chr.fa.infor.txt ./${prefix}.chr.fa.infor.txt
ln -sf ${workdir}/max_reads.txt .max_reads.txt
ln -sf ../*filter*.final.paf* .
ln -sf ../*filter*.score.txt* .

echo "All steps complete. Done!"
echo $(date +"%Y-%m-%d %H:%M:%S")
